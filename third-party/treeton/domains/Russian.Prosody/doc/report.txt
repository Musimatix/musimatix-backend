Treeton is a framework wich allows one to solve various problems in the natural language processing area. At the same time Treeton is
a graphical development environment which is built on the framework. Many ideas of Treeton trace to the the GATE framework created in the university
of Sheffield. In particular, the notion of a language processor conceived as a linked list of text processing resources was inherited from GATE. The language
processor takes a natural text as an input and performs a markup process. During this process different fragments of input text are supplied with annotations. 
Annotation is a continuous fragment of text provided with some meta-information. Both GATE and Treeton use feature-value pairs as meta-information. Further
I will show examples of annotations. However, Treeton uses a little bit more complex structures for the purposes of markup. Inside Treeton we use objects
called treenotations which are, in fact, annotations extended with internal tree structure. Treenotations were invented to serve the needs of
syntactic analysis, but soon they were found useful in the context of other problems. Examples of treenotations will be shown too.

Today I want to present a resource chain which allows one automatically identify the meter of syllabo-tonic verses. This chains consist of the following parts:

1. Tokeniser

The main function of this resource is to break the text into elementary graphic elements (character sequences, punctuation signs, spaces)

2. Syllabizator

Its function is to divide words into syllables. To achieve this goal the Sonority Sequencing Principle is used.

3. Morphological analyzer (developed by my father -- Sergei Starostin)

This resource generates morphological interpretations for each input word. At this stage we do not resolve either lexical or inflectional ambiguity.
Analyzer suggests hypotheses according to Zalizniak's dictionary which reflects norms of the Russian language of the middle of the 20 century. An
important feature of this dictionary is that it formally describes accentuation rules for each paradigm. Thus the variants of morphological analysis contain
information about stress placement.

4. Fragmentator

It identifies the rhetorical structure of the text (divides it into lines of verse, stanzas, cantos e.t.c.)


5. Accentuation form generator

 Absence of disambiguation leads to multiplicity of possible ways to accentuate a given poetic line. Here "possible" means possible for the 
 computer, rather than possible in general. In most cases unnecessary ambiguity is a consequence of the fact that we are not able to take 
 semantics into account. Further on a particular variant of stress placement will be called accentuation form. The goal of accent variants generator
 is to produce all possible accentuation forms for each line.

6. Meter analyzer

This resource performs the analysis of each verse and counts how close it is to either, one or another meter. To count such a distance we needed some
formal criteria. We used a formal specification of Russian syllabo-tonic meters which was proposed by the member of our seminar Nikolai Pertsov. 
It is based on Shapir's and Gasparov's definitions. The main idea of the analysis algorithm is very simple:

Let's consider a particular line and all its accentuation forms.

For each accentuation form analyzer counts a special numeric values (varying from 0 to 100) that show how close is the given form to each of the formally 
specified meters.
This numeric value was called a metric measure of the accentuation form relative to a given meter. When the meter is fixed one may talk
about the measure of iambus, the measure of trochee e.t.c.
At the next step all counted values are being averaged. These average numbers became the measure of the whole line. The meters for which the numbers 
were highest are considered correct. Thus, sometimes a line can be ascribed more than one meter (for example, one and the same line can fit iambus 
and amphibrach at 100%). 

We measured the precision of the described algorithm. Computer correctly identified 85% of about 500 syllabo-tonic lines. 

The general aim of our project is to create automated mechanisms of linguistic and prosodic markup and apply these mechanisms to massive corpora of 
poetic texts. An important element of this markup are metric parameters. Today we had demonstrated the program of meter recognition. We have several 
ideas on how to extend and optimize it. In particular we plan to add more metric patterns and to increase the precision of meter recognition by means 
of top-down elements (for instance resolve metric ambiguity of a particular line using the information about its rhythmic context).
















==========================================

Inside the Treeton different text processing resources are implemented. Some are absolutely language independant, other use special formal languages 
which allow to describe some phenomena of the natural language (e.g. rules of syntactical analysis) and the rest are completely "hardcoded" and are 
intended to work only with the certain language in the certain circumstances. Today I will talk about the resource 